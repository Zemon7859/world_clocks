{"ast":null,"code":"var _jsxFileName = \"/Users/zemon/Desktop/Demo/world_clock/src/App.js\";\nimport React from 'react';\nimport './App.css';\nlet count = 0; // 计数变量，用于判断是否发起时间同步请求\n// 获取各时区时间\n\nfunction getLocalTime(i) {\n  console.log(i); //参数i为时区值数字，比如北京为东八区则输进8,西5输入-5\n\n  if (typeof i !== 'number') return;\n  var d = new Date(); //得到1970年一月一日到现在的秒数\n\n  var len = d.getTime(); //本地时间与GMT时间的时间偏移差\n\n  var offset = d.getTimezoneOffset() * 60000; //得到现在的格林尼治时间\n\n  var utcTime = len + offset;\n  console.log(new Date(utcTime + 3600000 * i));\n  return new Date(utcTime + 3600000 * i).getTime();\n} // 时间处理\n\n\nfunction timeStampHandler(timeStamp) {\n  let timeObj = new Date(timeStamp);\n  let year = timeObj.getFullYear();\n  let month = timeObj.getMonth() + 1;\n  let date = timeObj.getDate();\n  let hour = timeObj.getHours();\n  let minute = timeObj.getMinutes();\n  let second = timeObj.getSeconds();\n  return {\n    date: `${year}-${month > 9 ? month : '0' + month}-${date > 9 ? date : '0' + date}`,\n    time: `${hour > 9 ? hour : '0' + hour}:${minute > 9 ? minute : '0' + minute}:${second > 9 ? second : '0' + second}`\n  };\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    let clocks_localStorage = localStorage.getItem('world_clocks_data');\n    let timeData = {};\n\n    if (clocks_localStorage && JSON.parse(clocks_localStorage).length > 0) {\n      JSON.parse(clocks_localStorage).forEach((data, index) => {\n        console.log(data);\n        timeData[data.place] = {\n          timeStamp: getLocalTime(data.timezone)\n        };\n      });\n    }\n\n    console.log(timeData);\n    this.state = {\n      adding: false,\n      timeData: timeData,\n      clocks: clocks_localStorage && JSON.parse(clocks_localStorage) || [],\n      cities: [{\n        place: 'London',\n        timezone: 0\n      }, {\n        place: 'China',\n        timezone: 8\n      }, {\n        place: 'Iraq',\n        timezone: 3\n      }, {\n        place: 'France',\n        timezone: 1\n      }]\n    };\n  }\n\n  componentDidMount() {\n    setInterval(async () => {\n      if (count === 60) {\n        console.log('wait req');\n        count = 0;\n        let res = await this.getTime(this.state.clocks);\n        console.log(res);\n\n        if (res.code === 800) {\n          this.setState({\n            timeData: res.data\n          });\n        }\n      } else {\n        this.localRefreshTime();\n        count++;\n      }\n    }, 1000);\n  } // 模拟获取时间异步请求\n\n\n  async getTime(clocks) {\n    return new Promise(resolve => setTimeout(() => {\n      let reqError = Math.random() <= 0.3;\n\n      if (reqError) {\n        resolve({\n          code: 400,\n          error: '请求出错'\n        });\n      } else {\n        console.log(111);\n        let timeData = {};\n        clocks.forEach((data, index) => {\n          timeData[data.place] = {\n            timeStamp: getLocalTime(data.timezone)\n          };\n        });\n        resolve({\n          code: 800,\n          data: timeData\n        });\n      }\n    }, 800));\n  } // 添加时钟\n\n\n  addClock(item) {\n    // if (this.state.adding) return\n    console.log(item);\n    console.log('点击增加时钟');\n    this.setState({\n      clocks: this.state.clocks.push(item)\n    }); // this.setState({\n    //     adding: true\n    // })\n  } // 本地按秒自动更新时间\n\n\n  localRefreshTime() {\n    let timeData = JSON.parse(JSON.stringify(this.state.timeData));\n\n    for (let place in timeData) {\n      timeData[place].timeStamp += 1000;\n    }\n\n    this.setState({\n      timeData\n    });\n  } // 渲染剩余dom，包含add网格\n\n\n  renderRowLeftEle(count) {\n    let dom = [];\n\n    for (let i = 0; i < count; i++) {\n      if (i === 0) {\n        dom.push( /*#__PURE__*/React.createElement(\"div\", {\n          className: \"clock add\",\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"city\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 25\n          }\n        }, \"+\"), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"time\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }\n        }, \"--\")));\n      } else {\n        dom.push( /*#__PURE__*/React.createElement(\"div\", {\n          className: \"clock\",\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"city\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"time\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }\n        })));\n      }\n    }\n\n    console.log(dom);\n    return dom;\n  } // 渲染下拉列表 选择时区\n\n\n  renderSelection() {\n    const {\n      cities\n    } = this.state;\n    let selections = [];\n    cities.map((item, index) => {\n      selections.push( /*#__PURE__*/React.createElement(\"li\", {\n        className: \"selections\",\n        key: index,\n        onClick: () => {\n          this.addClock(item);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 17\n        }\n      }, item.place));\n    });\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"selector-timezone\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }, selections);\n  }\n\n  render() {\n    const {\n      clocks,\n      timeData\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }\n    }, clocks.map((item, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"clock\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"city\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 37\n      }\n    }, item.place), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 41\n      }\n    }, timeStampHandler(timeData[item.place].timeStamp).date), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 41\n      }\n    }, timeStampHandler(timeData[item.place].timeStamp).time)), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"close\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 37\n      }\n    }, \"X\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"clock add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"city add-symbol\",\n      onClick: () => {\n        this.setState({\n          adding: true\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 29\n      }\n    }, \"+\", this.state.adding ? this.renderSelection() : ''), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 29\n      }\n    }, \"--\")))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/zemon/Desktop/Demo/world_clock/src/App.js"],"names":["React","count","getLocalTime","i","console","log","d","Date","len","getTime","offset","getTimezoneOffset","utcTime","timeStampHandler","timeStamp","timeObj","year","getFullYear","month","getMonth","date","getDate","hour","getHours","minute","getMinutes","second","getSeconds","time","App","Component","constructor","clocks_localStorage","localStorage","getItem","timeData","JSON","parse","length","forEach","data","index","place","timezone","state","adding","clocks","cities","componentDidMount","setInterval","res","code","setState","localRefreshTime","Promise","resolve","setTimeout","reqError","Math","random","error","addClock","item","push","stringify","renderRowLeftEle","dom","renderSelection","selections","map","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nlet count = 0 // 计数变量，用于判断是否发起时间同步请求\n\n// 获取各时区时间\nfunction getLocalTime(i) {\n    console.log(i)\n    //参数i为时区值数字，比如北京为东八区则输进8,西5输入-5\n    if (typeof i !== 'number') return;\n    var d = new Date();\n    //得到1970年一月一日到现在的秒数\n    var len = d.getTime();\n    //本地时间与GMT时间的时间偏移差\n    var offset = d.getTimezoneOffset() * 60000;\n    //得到现在的格林尼治时间\n    var utcTime = len + offset;\n    console.log(new Date(utcTime + 3600000 * i))\n    return new Date(utcTime + 3600000 * i).getTime();\n}\n\n// 时间处理\nfunction timeStampHandler(timeStamp) {\n    let timeObj = new Date(timeStamp)\n    let year = timeObj.getFullYear()\n    let month = timeObj.getMonth() + 1\n    let date = timeObj.getDate()\n    let hour = timeObj.getHours()\n    let minute = timeObj.getMinutes()\n    let second = timeObj.getSeconds()\n    return {\n        date: `${year}-${month > 9 ? month : '0' + month}-${date > 9 ? date : '0' + date}`,\n        time: `${hour > 9 ? hour : '0' + hour}:${minute > 9 ? minute : '0' + minute}:${second > 9 ? second : '0' + second}`\n    }\n}\n\nclass App extends React.Component {\n    constructor() {\n        super()\n        let clocks_localStorage = localStorage.getItem('world_clocks_data')\n        let timeData = {}\n        if (clocks_localStorage && JSON.parse(clocks_localStorage).length > 0) {\n            JSON.parse(clocks_localStorage).forEach((data, index) => {\n                console.log(data)\n                timeData[data.place] = {\n                    timeStamp: getLocalTime(data.timezone)\n                }\n            })\n        }\n        console.log(timeData)\n        this.state = {\n            adding: false,\n            timeData: timeData,\n            clocks: (clocks_localStorage && JSON.parse(clocks_localStorage)) || [],\n            cities: [\n                {\n                    place: 'London',\n                    timezone: 0\n                },\n                {\n                    place: 'China',\n                    timezone: 8\n                },\n                {\n                    place: 'Iraq',\n                    timezone: 3\n                },\n                {\n                    place: 'France',\n                    timezone: 1\n                }\n            ]\n        }\n    }\n\n    componentDidMount() {\n        setInterval(async () => {\n            if (count === 60) {\n                console.log('wait req')\n                count = 0\n                let res = await this.getTime(this.state.clocks)\n                console.log(res)\n                if (res.code === 800) {\n                    this.setState({\n                        timeData: res.data\n                    })\n                }\n            } else {\n                this.localRefreshTime()\n                count++\n            }\n        }, 1000)\n    }\n\n    // 模拟获取时间异步请求\n    async getTime(clocks) {\n        return new Promise(resolve => setTimeout(() => {\n            let reqError = Math.random() <= 0.3\n            if (reqError) {\n                resolve({\n                    code: 400,\n                    error: '请求出错'\n                })\n            } else {\n                console.log(111)\n                let timeData = {}\n                clocks.forEach((data, index) => {\n                    timeData[data.place] = {\n                        timeStamp: getLocalTime(data.timezone)\n                    }\n                })\n                resolve({\n                    code: 800,\n                    data: timeData\n                })\n            }\n        }, 800))\n    }\n\n    // 添加时钟\n    addClock(item) {\n        // if (this.state.adding) return\n        console.log(item)\n        console.log('点击增加时钟')\n        this.setState({\n            clocks: this.state.clocks.push(item)\n        })\n        // this.setState({\n        //     adding: true\n        // })\n    }\n\n    // 本地按秒自动更新时间\n    localRefreshTime() {\n        let timeData = JSON.parse(JSON.stringify(this.state.timeData))\n        for (let place in timeData) {\n            timeData[place].timeStamp += 1000\n        }\n        this.setState({\n            timeData\n        })\n    }\n\n    // 渲染剩余dom，包含add网格\n    renderRowLeftEle(count) {\n        let dom = []\n        for (let i = 0; i < count; i++) {\n            if (i === 0) {\n                dom.push(\n                    <div className=\"clock add\" key={i}>\n                        <div className=\"city\">+</div>\n                        <div className=\"time\">--</div>\n                    </div>\n                )\n            } else {\n                dom.push(\n                    <div className=\"clock\" key={i}>\n                        <div className=\"city\"></div>\n                        <div className=\"time\"></div>\n                    </div>\n                )\n            }\n\n        }\n        console.log(dom)\n        return dom\n    }\n\n    // 渲染下拉列表 选择时区\n    renderSelection() {\n        const {cities} = this.state\n        let selections = []\n\n        cities.map((item, index) => {\n            selections.push(\n                <li className=\"selections\" key={index} onClick={() => {this.addClock(item)}}>{item.place}</li>\n            )\n        })\n\n        return (\n            <ul className=\"selector-timezone\">\n                {\n                    selections\n                }\n            </ul>\n        )\n    }\n\n    render() {\n        const {clocks, timeData} = this.state\n        return (\n            <div className=\"App\">\n                <div className=\"table\">\n                    <div className=\"block\">\n                        {\n                            clocks.map((item, index) => (\n                                <div className=\"clock\" key={index}>\n                                    <div className=\"city\">{item.place}</div>\n                                    <div className=\"time\">\n                                        <code>{timeStampHandler(timeData[item.place].timeStamp).date}</code>\n                                        <br/>\n                                        <code>{timeStampHandler(timeData[item.place].timeStamp).time}</code>\n                                    </div>\n                                    <span className=\"close\">X</span>\n                                </div>\n                            ))\n                        }\n                        <div className=\"clock add\">\n                            <div className=\"city add-symbol\" onClick={() => {this.setState({adding: true})}}>\n                                +\n                                {\n                                    this.state.adding ?\n                                        this.renderSelection() : ''\n                                }\n                            </div>\n                            {/*{*/}\n                            {/*    this.renderSelection()*/}\n                            {/*}*/}\n                            <div className=\"time\">--</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}