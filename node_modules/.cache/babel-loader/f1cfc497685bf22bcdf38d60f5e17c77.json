{"ast":null,"code":"var _jsxFileName = \"/Users/zemon/Desktop/Demo/world_clock/src/App.js\";\nimport React from 'react';\nimport './App.css';\nlet count = 0; // 计数变量，用于判断是否发起时间同步请求\n// 获取各时区时间\n\nfunction getLocalTime(i) {\n  console.log(i); //参数i为时区值数字，比如北京为东八区则输进8,西5输入-5\n\n  if (typeof i !== 'number') return;\n  var d = new Date(); //得到1970年一月一日到现在的秒数\n\n  var len = d.getTime(); //本地时间与GMT时间的时间偏移差\n\n  var offset = d.getTimezoneOffset() * 60000; //得到现在的格林尼治时间\n\n  var utcTime = len + offset;\n  console.log(new Date(utcTime + 3600000 * i));\n  return new Date(utcTime + 3600000 * i).getTime();\n} // 时间处理\n\n\nfunction timeStampHandler(timeStamp) {\n  let timeObj = new Date(timeStamp);\n  let year = timeObj.getFullYear();\n  let month = timeObj.getMonth() + 1;\n  let date = timeObj.getDate();\n  let hour = timeObj.getHours();\n  let minute = timeObj.getMinutes();\n  let second = timeObj.getSeconds();\n  return {\n    date: `${year}-${month > 9 ? month : '0' + month}-${date > 9 ? date : '0' + date}`,\n    time: `${hour > 9 ? hour : '0' + hour}:${minute > 9 ? minute : '0' + minute}:${second > 9 ? second : '0' + second}`\n  };\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    let clocks_localStorage = JSON.parse(localStorage.getItem('world_clocks_data'));\n    let timeData = {};\n    clocks_localStorage.forEach((data, index) => {\n      timeData[data.place] = {\n        timeStamp: getLocalTime(data.timezone)\n      };\n    });\n    console.log(this.state, '=======');\n    this.state = {\n      adding: false,\n      timeData,\n      clocks: clocks_localStorage || [],\n      cities: [{\n        place: 'London',\n        timezone: 0\n      }, {\n        place: 'China',\n        timezone: 8\n      }, {\n        place: 'Iraq',\n        timezone: 3\n      }, {\n        place: 'France',\n        timezone: 1\n      }]\n    };\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      setInterval(async () => {\n        let clocks_localStorage = JSON.parse(localStorage.getItem('world_clocks_data'));\n        this.setState({\n          clocks: clocks_localStorage || []\n        });\n        this.updateTimeData(this.state.clocks);\n        console.log(this.state, '=======');\n\n        if (count === 60) {\n          console.log('wait req');\n          count = 0;\n          let res = await this.getTime(this.state.clocks);\n          console.log(res);\n\n          if (res.code === 800) {\n            this.setState({\n              timeData: res.data\n            });\n          }\n        } else {\n          this.localRefreshTime();\n          count++;\n        }\n      }, 1000);\n    }, 1000);\n  } // 更新时间对象\n\n\n  updateTimeData(clocks) {\n    let timeData = {};\n    clocks.forEach((data, index) => {\n      console.log(data);\n      timeData[data.place] = {\n        timeStamp: getLocalTime(data.timezone)\n      };\n    });\n    this.setState({\n      timeData\n    });\n    console.log(timeData);\n  } // 模拟获取时间异步请求\n\n\n  async getTime(clocks) {\n    return new Promise(resolve => setTimeout(() => {\n      let reqError = Math.random() <= 0.3;\n\n      if (reqError) {\n        resolve({\n          code: 400,\n          error: '请求出错'\n        });\n      } else {\n        console.log(111);\n        let timeData = {};\n        clocks.forEach((data, index) => {\n          timeData[data.place] = {\n            timeStamp: getLocalTime(data.timezone)\n          };\n        });\n        resolve({\n          code: 800,\n          data: timeData\n        });\n      }\n    }, 800));\n  } // 添加时钟\n\n\n  addClock(e, item) {\n    e.nativeEvent.stopImmediatePropagation();\n    e.stopPropagation();\n    let clocks = JSON.parse(JSON.stringify(this.state.clocks));\n    let timeData = JSON.parse(JSON.stringify(this.state.timeData));\n\n    if (!timeData[item.place]) {\n      timeData[item.place] = {\n        timeStamp: getLocalTime(item.timezone)\n      };\n    }\n\n    clocks.push(item);\n    this.setState({\n      clocks,\n      timeData,\n      adding: false\n    }); // 更新本地缓存\n\n    localStorage.setItem('world_clocks_data', JSON.stringify(clocks));\n  } // 本地按秒自动更新时间\n\n\n  localRefreshTime() {\n    let timeData = JSON.parse(JSON.stringify(this.state.timeData));\n\n    for (let place in timeData) {\n      timeData[place].timeStamp += 1000;\n    }\n\n    this.setState({\n      timeData\n    });\n  } // 删除时钟\n\n\n  deleteClock(index) {\n    let clocks = JSON.parse(JSON.stringify(this.state.clocks));\n    clocks.splice(index, 1); // 更新本地缓存\n\n    localStorage.setItem('world_clocks_data', JSON.stringify(clocks));\n    this.setState({\n      clocks\n    });\n  } // 显示时钟选项\n\n\n  showSelection(e) {\n    console.log(e);\n    console.log('-----');\n    e.nativeEvent.stopImmediatePropagation();\n    e.stopPropagation();\n    this.setState({\n      adding: true\n    });\n  } // 渲染行内补充元素保证布局整齐\n\n\n  renderFillingDom(count) {\n    let dom = [];\n\n    for (let i = 0; i < count; i++) {\n      dom.push( /*#__PURE__*/React.createElement(\"div\", {\n        className: \"clock filling-dom\",\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 17\n        }\n      }));\n    }\n\n    return dom;\n  } // 渲染下拉列表 选择时区\n\n\n  renderSelection() {\n    const {\n      cities\n    } = this.state;\n    let selections = [];\n    cities.map((item, index) => {\n      selections.push( /*#__PURE__*/React.createElement(\"li\", {\n        className: \"selections\",\n        key: index,\n        onClick: e => {\n          this.addClock(e, item);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 17\n        }\n      }, item.place));\n    });\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"selector-timezone\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 13\n      }\n    }, selections);\n  }\n\n  render() {\n    const {\n      clocks,\n      timeData\n    } = this.state;\n    let column = document.body.offsetWidth < 1500 ? 3 : 4;\n    const remainder = clocks.length > 0 && column - clocks.length % column - 1;\n    console.log(timeData, '88888888');\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      onClick: () => {\n        this.setState({\n          adding: false\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 21\n      }\n    }, clocks.map((item, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"clock\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"city\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 37\n      }\n    }, item.place), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 41\n      }\n    }, timeStampHandler(timeData[item.place].timeStamp).date), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 41\n      }\n    }, timeStampHandler(timeData[item.place].timeStamp).time)), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"close\",\n      onClick: () => {\n        this.deleteClock(index);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 37\n      }\n    }, \"X\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"clock add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"city add-symbol\",\n      onClick: e => {\n        this.showSelection(e);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 29\n      }\n    }, \"+\", this.state.adding ? this.renderSelection() : null), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 29\n      }\n    }, \"--\")), remainder > 0 ? this.renderFillingDom(remainder) : null)));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/zemon/Desktop/Demo/world_clock/src/App.js"],"names":["React","count","getLocalTime","i","console","log","d","Date","len","getTime","offset","getTimezoneOffset","utcTime","timeStampHandler","timeStamp","timeObj","year","getFullYear","month","getMonth","date","getDate","hour","getHours","minute","getMinutes","second","getSeconds","time","App","Component","constructor","clocks_localStorage","JSON","parse","localStorage","getItem","timeData","forEach","data","index","place","timezone","state","adding","clocks","cities","componentDidMount","setTimeout","setInterval","setState","updateTimeData","res","code","localRefreshTime","Promise","resolve","reqError","Math","random","error","addClock","e","item","nativeEvent","stopImmediatePropagation","stopPropagation","stringify","push","setItem","deleteClock","splice","showSelection","renderFillingDom","dom","renderSelection","selections","map","render","column","document","body","offsetWidth","remainder","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nlet count = 0 // 计数变量，用于判断是否发起时间同步请求\n\n// 获取各时区时间\nfunction getLocalTime(i) {\n    console.log(i)\n    //参数i为时区值数字，比如北京为东八区则输进8,西5输入-5\n    if (typeof i !== 'number') return;\n    var d = new Date();\n    //得到1970年一月一日到现在的秒数\n    var len = d.getTime();\n    //本地时间与GMT时间的时间偏移差\n    var offset = d.getTimezoneOffset() * 60000;\n    //得到现在的格林尼治时间\n    var utcTime = len + offset;\n    console.log(new Date(utcTime + 3600000 * i))\n    return new Date(utcTime + 3600000 * i).getTime();\n}\n\n// 时间处理\nfunction timeStampHandler(timeStamp) {\n    let timeObj = new Date(timeStamp)\n    let year = timeObj.getFullYear()\n    let month = timeObj.getMonth() + 1\n    let date = timeObj.getDate()\n    let hour = timeObj.getHours()\n    let minute = timeObj.getMinutes()\n    let second = timeObj.getSeconds()\n    return {\n        date: `${year}-${month > 9 ? month : '0' + month}-${date > 9 ? date : '0' + date}`,\n        time: `${hour > 9 ? hour : '0' + hour}:${minute > 9 ? minute : '0' + minute}:${second > 9 ? second : '0' + second}`\n    }\n}\n\nclass App extends React.Component {\n    constructor() {\n        super()\n        let clocks_localStorage = JSON.parse(localStorage.getItem('world_clocks_data'))\n        let timeData = {}\n        clocks_localStorage.forEach((data, index) => {\n            timeData[data.place] = {\n                timeStamp: getLocalTime(data.timezone)\n            }\n        })\n        console.log(this.state, '=======')\n        this.state = {\n            adding: false,\n            timeData,\n            clocks: clocks_localStorage || [],\n            cities: [\n                {\n                    place: 'London',\n                    timezone: 0\n                },\n                {\n                    place: 'China',\n                    timezone: 8\n                },\n                {\n                    place: 'Iraq',\n                    timezone: 3\n                },\n                {\n                    place: 'France',\n                    timezone: 1\n                }\n            ]\n        }\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            setInterval(async () => {\n                let clocks_localStorage = JSON.parse(localStorage.getItem('world_clocks_data'))\n                this.setState({\n                    clocks: clocks_localStorage || []\n                })\n                this.updateTimeData(this.state.clocks)\n                console.log(this.state, '=======')\n                if (count === 60) {\n                    console.log('wait req')\n                    count = 0\n                    let res = await this.getTime(this.state.clocks)\n                    console.log(res)\n                    if (res.code === 800) {\n                        this.setState({\n                            timeData: res.data\n                        })\n                    }\n                } else {\n                    this.localRefreshTime()\n                    count++\n                }\n            }, 1000)\n        }, 1000)\n    }\n\n    // 更新时间对象\n    updateTimeData(clocks) {\n        let timeData = {}\n        clocks.forEach((data, index) => {\n            console.log(data)\n            timeData[data.place] = {\n                timeStamp: getLocalTime(data.timezone)\n            }\n        })\n        this.setState({\n            timeData\n        })\n        console.log(timeData)\n    }\n\n    // 模拟获取时间异步请求\n    async getTime(clocks) {\n        return new Promise(resolve => setTimeout(() => {\n            let reqError = Math.random() <= 0.3\n            if (reqError) {\n                resolve({\n                    code: 400,\n                    error: '请求出错'\n                })\n            } else {\n                console.log(111)\n                let timeData = {}\n                clocks.forEach((data, index) => {\n                    timeData[data.place] = {\n                        timeStamp: getLocalTime(data.timezone)\n                    }\n                })\n                resolve({\n                    code: 800,\n                    data: timeData\n                })\n            }\n        }, 800))\n    }\n\n    // 添加时钟\n    addClock(e, item) {\n        e.nativeEvent.stopImmediatePropagation()\n        e.stopPropagation()\n        let clocks = JSON.parse(JSON.stringify(this.state.clocks))\n        let timeData = JSON.parse(JSON.stringify(this.state.timeData))\n        if (!timeData[item.place]) {\n            timeData[item.place] = {\n                timeStamp: getLocalTime(item.timezone)\n            }\n        }\n        clocks.push(item)\n        this.setState({\n            clocks,\n            timeData,\n            adding: false\n        })\n        // 更新本地缓存\n        localStorage.setItem('world_clocks_data', JSON.stringify(clocks))\n    }\n\n    // 本地按秒自动更新时间\n    localRefreshTime() {\n        let timeData = JSON.parse(JSON.stringify(this.state.timeData))\n        for (let place in timeData) {\n            timeData[place].timeStamp += 1000\n        }\n        this.setState({\n            timeData\n        })\n    }\n\n\n    // 删除时钟\n    deleteClock(index) {\n        let clocks = JSON.parse(JSON.stringify(this.state.clocks))\n        clocks.splice(index, 1)\n        // 更新本地缓存\n        localStorage.setItem('world_clocks_data', JSON.stringify(clocks))\n        this.setState({\n            clocks\n        })\n    }\n\n    // 显示时钟选项\n    showSelection(e) {\n        console.log(e)\n        console.log('-----')\n        e.nativeEvent.stopImmediatePropagation()\n        e.stopPropagation()\n        this.setState({\n            adding: true\n        })\n    }\n\n    // 渲染行内补充元素保证布局整齐\n    renderFillingDom(count) {\n        let dom = []\n        for (let i = 0; i < count; i++) {\n            dom.push(\n                <div className=\"clock filling-dom\" key={i}></div>\n            )\n        }\n        return dom\n    }\n\n    // 渲染下拉列表 选择时区\n    renderSelection() {\n        const {cities} = this.state\n        let selections = []\n\n        cities.map((item, index) => {\n            selections.push(\n                <li className=\"selections\" key={index} onClick={(e) => {\n                    this.addClock(e, item)\n                }}>{item.place}</li>\n            )\n        })\n\n        return (\n            <ul className=\"selector-timezone\">\n                {\n                    selections\n                }\n            </ul>\n        )\n    }\n\n    render() {\n        const {clocks, timeData} = this.state\n        let column = document.body.offsetWidth < 1500 ? 3 : 4\n        const remainder = clocks.length > 0 && (column - clocks.length % column - 1)\n        console.log(timeData, '88888888')\n        return (\n            <div className=\"App\" onClick={() => {\n                this.setState({adding: false})\n            }}>\n                <div className=\"table\">\n                    <div className=\"block\">\n                        {\n                            clocks.map((item, index) => (\n                                <div className=\"clock\" key={index}>\n                                    <div className=\"city\">{item.place}</div>\n                                    <div className=\"time\">\n                                        <code>{timeStampHandler(timeData[item.place].timeStamp).date}</code>\n                                        <br/>\n                                        <code>{timeStampHandler(timeData[item.place].timeStamp).time}</code>\n                                    </div>\n                                    <span className=\"close\" onClick={() => {\n                                        this.deleteClock(index)\n                                    }}>X</span>\n                                </div>\n                            ))\n                        }\n                        <div className=\"clock add\">\n                            <div className=\"city add-symbol\" onClick={(e) => {\n                                this.showSelection(e)\n                            }}>\n                                +\n                                {\n                                    this.state.adding ?\n                                        this.renderSelection() : null\n                                }\n                            </div>\n                            <div className=\"time\">--</div>\n                        </div>\n                        {\n                            remainder > 0 ? this.renderFillingDom(remainder) : null\n\n                        }\n\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}